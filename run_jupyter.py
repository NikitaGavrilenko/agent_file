#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Jupyter notebook
"""

import asyncio
import nest_asyncio
import os
from pathlib import Path
from agent.document_analyzer import create_analyzer

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è Jupyter
nest_asyncio.apply()

def ensure_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    for folder in ["documents", "reports", "logs"]:
        if not os.path.exists(folder):
            os.makedirs(folder, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ '{folder}' —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"‚úÖ –ü–∞–ø–∫–∞ '{folder}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def analyze_documents_async(question_topic: str = "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ –æ—à–∏–±–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = create_analyzer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        result = await analyzer.analyze_documents("documents", question_topic)
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()
        return None

def run_analysis(question_topic: str = "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ –æ—à–∏–±–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ Jupyter"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫...")
        ensure_directories()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = asyncio.run(analyze_documents_async(question_topic))
        
        if result:
            print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['documents_analyzed']}")
            print(f"‚ö†Ô∏è  –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {result['risks_found']}")
            print(f"üîç –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–µ–¥—É–±–ª–∏–∫–∞—Ü–∏–∏: {result['risks_after_deduplication']}")
            print(f"üéØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é: {result['risks_with_relevance']}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time_seconds']:.2f} —Å–µ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            if 'saved_report_path' in result:
                print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {result['saved_report_path']}")
            if 'saved_log_path' in result:
                print(f"üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result['saved_log_path']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
            if 'analysis_summary' in result and 'risk_statistics' in result['analysis_summary']:
                stats = result['analysis_summary']['risk_statistics']
                if 'types' in stats:
                    print(f"\nüìã –†–ê–ó–ë–ò–í–ö–ê –ü–û –¢–ò–ü–ê–ú:")
                    for risk_type, count in stats['types'].items():
                        print(f"‚Ä¢ {risk_type}: {count}")
                    
                if 'relevance' in stats:
                    print(f"\nüéØ –†–ê–ó–ë–ò–í–ö–ê –ü–û –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò:")
                    for relevance, count in stats['relevance'].items():
                        print(f"‚Ä¢ {relevance}: {count}")
            
            print(f"\nüìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'reports'")
            print(f"üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'logs'")
            return result
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Jupyter notebook:
# from run_jupyter import run_analysis
# result = run_analysis("–ú–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∞–Ω–∞–ª–∏–∑—É")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    result = run_analysis()
