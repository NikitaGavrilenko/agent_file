#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    print("\nüìÅ –°–æ–∑–¥–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏...")
    for folder in ["documents", "reports", "logs"]:
        if not os.path.exists(folder):
            os.makedirs(folder, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ '{folder}' —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"‚úÖ –ü–∞–ø–∫–∞ '{folder}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("OPENAI_API_KEY"):
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY")
        print("\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ PowerShell:")
        print("$env:OPENAI_API_KEY = '–≤–∞—à_–∫–ª—é—á_api'")
        print("\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á_api")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    documents = [f for f in os.listdir("documents") if f.lower().endswith(('.pdf', '.docx', '.pptx', '.txt'))]
    
    if not documents:
        print("\nüìÅ –ü–∞–ø–∫–∞ 'documents' –ø—É—Å—Ç–∞")
        print("–î–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return
    
    print(f"\nüìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
    for doc in documents:
        print(f"   - {doc}")
    
    print("\n" + "="*60)
    print("–í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´")
    print("="*60)
    print("1. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    print("3. –í—ã—Ö–æ–¥")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ").strip()
        
        if choice == "1":
            # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
            question_topic = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¥–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'): ").strip()
            if question_topic:
                print(f"\nüîç –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–º—ã: '{question_topic}'")
                print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                try:
                    from agent.document_analyzer import create_analyzer
                    import asyncio
                    
                    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    analyzer = create_analyzer()
                    result = asyncio.run(analyzer.analyze_documents("documents", question_topic))
                    
                    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                    print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['documents_analyzed']}")
                    print(f"‚ö†Ô∏è  –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {result['risks_found']}")
                    print(f"üîç –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–µ–¥—É–±–ª–∏–∫–∞—Ü–∏–∏: {result['risks_after_deduplication']}")
                    print(f"üéØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é: {result['risks_with_relevance']}")
                    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time_seconds']:.2f} —Å–µ–∫")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
                    if 'saved_report_path' in result:
                        print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {result['saved_report_path']}")
                    if 'saved_log_path' in result:
                        print(f"üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result['saved_log_path']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
                    if 'analysis_summary' in result and 'risk_statistics' in result['analysis_summary']:
                        stats = result['analysis_summary']['risk_statistics']
                        if 'types' in stats:
                            print(f"\nüìã –†–ê–ó–ë–ò–í–ö–ê –ü–û –¢–ò–ü–ê–ú:")
                            for risk_type, count in stats['types'].items():
                                print(f"   - {risk_type}: {count}")
                        
                        if 'relevance' in stats:
                            print(f"\nüéØ –†–ê–ó–ë–ò–í–ö–ê –ü–û –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò:")
                            for relevance, count in stats['relevance'].items():
                                print(f"   - {relevance}: {count}")
                    
                    print(f"\nüìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'reports'")
                    print(f"üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'logs'")
                    
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
                    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ 'logs'")
                
                break
            else:
                print("‚ùå –¢–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                
        elif choice == "2":
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            print("\nüîÑ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
            try:
                print("‚ÑπÔ∏è  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º 1 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            break
            
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")


if __name__ == "__main__":
    main()
